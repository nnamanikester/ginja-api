type User {
    id: ID!  @id @unique
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    dob: String!
    terms: Boolean
    type: OrganizationType!
    wallet: Wallet!
    referral: Referral!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Referral {
    id: ID!  @id @unique
    status: Int!
    refCode: Int!
    userId: String!
    referrals: [Referrals]
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
}

type Crowns {
    id: ID!  @id @unique
    requiredReferrals: Int!
    noOfDays: Int!
    noOfDays: Int!
    bonus: Int!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
}

type Referrals {
    id: ID!  @id @unique
    crowns: Int!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
}

type wallet {
    id: ID!  @id @unique
    availableBalance: Float!
    status: Int!
    ledgerBalance: Float!
    userId: String!
    currency: String!
    transactions: [Transactions]
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Transactions {
    id: ID!  @id @unique
    status: Int!
    type: Int!
    amount: Float!
    fees: Int!
    sender: TransactionUser
    recipient: TransactionUser
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type TransactionUser {
    id: ID!  @id @unique
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    wallet: Wallet!
}

type SpacesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type Locations {
    id: ID!  @id @unique
    country: String!
    state: String
    geo: String
    lga: String
    street: String
    userId: String
}

type PropertiesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type WallFinishesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type ListingDimensions {
    id: ID!  @id @unique
    height: Float!
    weight: Float!
    length: Float!
    unitOfDimensions: Int
    volume: Float
    area: Float
}

type WarehouserIdentification {
    id: ID!  @id @unique
    idNumber: String!
    expiryDate: String!
    idType: String!
}

type Listing {
    id: ID!  @id @unique
    name: String
    slug: String
    user: User!
    description: String!
    price: Float!
    discount: Int
    currency: String!
    proofOfOwnership: String!
    identification: WarehouserIdentification!
    spacing: [SpacesOptions]!
    property:[PropertiesOptions]!
    floor:[FloorsOptions]!
    wallFinish:[WallFinishesOptions]!
    roofing:[RoofingMaterialOptions]!
    isSecure: SelectOptions! @relation(name: "SelectOptions_isSecure")
    pest: SelectOptions!  @relation(name: "SelectOptions_pest")
    windows: Int!
    location: Locations!
    amenities: [AmenitiesOptions]!
    avatar: String!
    vas: [ValueAddedServices]!
    listingPhotos: [ListingPhotos]!
    frequency: ListingsFrequencies!
    requirements: [ListingRequirements]!
    products: [ListingProducts]!
    availability: ListingAvailability!
    dimensions: ListingDimensions!
    status: Int!
    rating: ListingRating!
}

type Rating {
    id: ID!  @id @unique
    listingId: String!
    ratingId: String!
    rate: Int!
    userId: String!
}

type Requisition {
    id: ID!  @id @unique
    duration: RequisitionDuration!
    cost: RequisitionCost!
    user: User!
    expires: String
    products: [ListingProducts!]!
    listing: Listing!
    space: Int!
    status: Int!
}

type RequisitionCost {
    id: ID!  @id @unique
    baseCost: Float!
    vat: Float!
    discount: Float
}

type RequisitionDuration {
    id: ID!  @id @unique
    name: String!
    slug: String
}

type ListingRating {
    id: ID!  @id @unique
    count: Int!
    rates: Int!
    average: Float!
}

type ListingAvailability {
    id: ID!  @id @unique
    from: String!
    to: String!
}

type ListingRequirements {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
}

type SelectOptions {
    id: ID!  @id @unique
    slug: String
    name: String
}

type RoofingMaterialOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type FloorsOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type AmenitiesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type ValueAddedServices {
    id: ID!  @id @unique
    slug: String
    default: Boolean
    name: String
    userId: String
}

type IdentificationsOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type ListingsFrequencies {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type ListingPhotos {
    id: ID!  @id @unique
    url: String!
    default: Boolean
}

type States {
    id: ID!  @id @unique
    countryId: String!
    slug: String
    name: String
    default: Boolean
}

type Countries {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
}

type ListingProducts {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
}

type Organization {
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    id: ID! @id @unique
    name: String
    email: String!
    type: OrganizationType!
    phoneNumber: String!
    bank: Bank!
}

type OrganizationType {
    id: ID! @id @unique
    name: String  @unique
}


type Auth {
    id: ID!  @id @unique
    email: String!  @unique
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    phoneNumber: String!  @unique
    pin: String!
    userId: String!
    user: User!
}

type Payment {
    id: ID!  @id @unique
    email: String! 
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    amount: Float! 
    requisition: Requisition!
    status: Int!
    currency: String!
    channel: String
    customer: PaymentCustomer @relation(name: "PaymentCustomer_customer")
    info: String!
}

type PaymentCustomer {
    id: ID!  @id @unique
    paystackId: String
    customerCode: String
    firstName: String
    lastName: String
    email: String
}

type Otp {
    id: ID!  @id @unique
    phoneNumber: String! @unique
    code: String!
    validated: Boolean!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type UserOrganizationRole {
    id: ID!  @id @unique
    user: User!
    role: Role!
    organization: Organization!
}

type Role {
    id: ID! @id @unique
    name: String  @unique
}

type Success {
    id: ID! @id @unique
    success: Boolean!
}

type Bank {
    id: ID! @id @unique
    accountNumber: String!
    accountName: String!
    bankName: String!
    bankCode: String!
}

input AuthWhereUniqueInput {
  id: ID
  email: String
  phoneNumber: String
}

input OtpWhereUniqueInput {
  id: ID
  phoneNumber: String
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Stock {
	id: ID!  @id @unique
	type: Int!
	products: [StockProduct!]!
	status: Int!
	dispatch: StockDispatch
    requisition: Requisition!
}

type StockDispatch {
    id: ID!  @id @unique
    pickupAgentName:String
    pickupAgentPhone: String
    pickupAgentIdentification: String
    pickupAgentIdNumber: String
    pickupDate: DateRange
    status: Int!
    pickupDateMin: String
    pickupDateMax: String
}

type DateRange {
    id: ID!  @id @unique
    min: String    
    max: String!
}

type StockProduct {
    id: ID!  @id @unique
    productBrandName: String!
    productType: String!
    productPackageSize: String!
    quantityPerPackageSize: Int!
    totalQuantity: Int!
    productImage: String!
}
