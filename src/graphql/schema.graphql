type Query {
    info: String
    users: [User!]!
    listings(filter: String, user: String, location: LocationsInput, skip: Int, first: Int): [Listing]
    banks: [Bank!]!
    payments: [Payment]
    auths: [Auth!]!
    roles: [Role!]!
    listingProducts: [ListingProducts]
    listingRequirements: [ListingRequirements]
    listingsFrequencies: [ListingsFrequencies]
    valueAddedServices: [ValueAddedServices]
    amenitiesOptions: [AmenitiesOptions]
    selectOptions: [SelectOptions]
    floorsOptions: [FloorsOptions]
    roofingMaterialOptions: [RoofingMaterialOptions]
    wallFinishesOptions: [WallFinishesOptions]
    propertiesOptions: [PropertiesOptions]
    spacesOptions: [SpacesOptions]
    role(id: ID, name: String): Role!
    otp(id: ID, phoneNumber: String): Otp!
    stocks(first: Int, skip: Int, merchant: String, warehouser: String, status: Int): [Stock]!
    organizations: [Organization!]!
    organizationTypes: [OrganizationType!]!
    userOrganizationRoles: [UserOrganizationRole!]!
    requisitions(user: String, skip: Int, first: Int): [Requisition]!
}

type Mutation {
    signUp(
        firstName: String!
        lastName: String!
        type: String!
        email: String!
        phoneNumber: String!
        dob: String
        pin: String!
        accountNumber: String!
        accountName: String!
        bankName: String!
        bankCode: String!
    ): AuthPayload!
    changeRequisitionStatus(id: String!, status: Int!): Success!
    submitRating(listingId: String!, ratingId: String!, rate: Int!, userId: String!): Success!
    addListing(
        user: String!
        name: String!
        description: String!
        price: Float!
        discount: Int
        currency: String!
        proofOfOwnership: String!
        identification: WarehouserIdentification!
        spacing: [SelectOption!]!
        property: [SelectOption!]!
        floor: [SelectOption!]!
        wallFinish: [SelectOption!]!
        roofing: [SelectOption!]!
        isSecure: SelectOption!
        pest: SelectOption!
        windows: Int!
        location: Locations!
        amenities: [SelectOption!]!
        avatar: String!
        vas: [SelectOption!]!
        listingPhotos: [ListingPhotos!]!
        frequency: SelectOption!
        requirements: [SelectOption!]!
        products: [SelectOption!]!
        availability: ListingAvailability!
        dimensions: ListingDimensions!
    ): Success!
    createRequisition(
        products: [SelectOption!]
        duration: RequisitionDurationInput
        cost: RequisitionCostInput!
        expires: String!
        user: String!
        listing: String!
        space: Int!
    ): Success!

    createStock(type: Int!, products: [StockProductInput!]!, requisition: String!): Success!
    createDispatch(id: String!, dispatch: StockDispatchInput!): Success!
    initializePayment(requisitionId: String!, amount: Float!, email: String!, currency: String): PaymentResponse!
    verifyPayment(transactionRef: String!): PaymentResponse!
    generateOtp(phoneNumber: String!): Otp!
    validateOtp(otp: String!, phoneNumber: String!): Success!
    login(pin: String!, phoneNumber: String!): AuthPayload!
    createRole(name: String!): Success!
    acceptTerms(id: String!): Success!
    createOrganizationType(name: String!): OrganizationType!
    resolveAccountNumber(accountNumber: String!, bankCode: String!): AccountResolve
}

input TableFilterStringInput {
    ne: String
    eq: String
    le: String
    ge: String
    lt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

type SpacesOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

input Locations {
    country: String!
    state: String!
    geo: String!
    lga: String
    street: String!
    userId: String
}

type LocationsResult {
    country: String
    state: String
    geo: String
    lga: String
    street: String
    userId: String
}

input LocationsInput {
    country: String
    state: String
    geo: String
    lga: String
    street: String
    userId: String
}

type PropertiesOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

input SelectOption {
    id: String!
}

type WallFinishesOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

input ListingDimensions {
    height: Float!
    weight: Float!
    length: Float!
    unitOfDimensions: Int
    volume: Float
    area: Float
}

type ListingDimensionsResponse {
    height: Float!
    weight: Float!
    length: Float!
    unitOfDimensions: Int
    volume: Float
    area: Float
}

input WarehouserIdentification {
    idNumber: String!
    expiryDate: String!
    idType: String!
}

type WarehouserIdentificationResult {
    idNumber: String!
    expiryDate: String!
    idType: String!
}

type ListingDimensionsResult {
    height: Float!
    weight: Float!
    length: Float!
    unitOfDimensions: Int
    volume: Float
    area: Float
}

type Listing {
    id: ID!
    user: User!
    name: String!
    slug: String!
    description: String!
    price: Float!
    discount: Int
    currency: String!
    proofOfOwnership: String!
    identification: WarehouserIdentificationResult!
    spacing: [SpacesOptions]!
    property: [PropertiesOptions]!
    floor: [FloorsOptions]!
    wallFinish: [WallFinishesOptions]!
    roofing: [RoofingMaterialOptions]!
    isSecure: SelectOptions!
    pest: SelectOptions!
    windows: Int!
    location: LocationsResult!
    amenities: [AmenitiesOptions]!
    avatar: String!
    vas: [ValueAddedServices]!
    listingPhotos: [ListingPhotosResult]!
    frequency: ListingsFrequencies!
    requirements: [ListingRequirements]!
    products: [ListingProducts]!
    availability: ListingAvailabilityResponse!
    dimensions: ListingDimensionsResponse!
    status: Int
    rating: ListingRating
}

type Requisition {
    id: ID!
    duration: RequisitionDuration!
    cost: RequisitionCost!
    user: User!
    listing: Listing!
    expires: String
    products: [ListingProducts!]!
    space: Int!
    status: Int!
}

type Stock {
    id: ID!
    type: Int!
    products: [StockProduct!]!
    status: Int!
    dispatch: StockDispatch!
    requisition: Requisition!
}

type StockDispatch {
    id: ID!
    pickupAgentName: String
    pickupAgentPhone: String
    pickupAgentIdentification: String
    pickupAgentIdNumber: String
    pickupDateMin: String
    pickupDateMax: String
    status: Int!
}

input StockDispatchInput {
    pickupAgentName: String
    pickupAgentPhone: String
    pickupAgentIdentification: String
    pickupAgentIdNumber: String
    pickupDateMin: String
    pickupDateMax: String
    status: Int!
}

type DateRange {
    id: ID!
    min: String
    max: String!
}

input DateRangeInput {
    min: String
    max: String!
}

type StockProduct {
    id: ID!
    productBrandName: String!
    productType: String!
    productPackageSize: String!
    quantityPerPackageSize: Int!
    totalQuantity: Int!
    productImage: String!
}

input StockProductInput {
    productBrandName: String!
    productType: String!
    productPackageSize: String!
    quantityPerPackageSize: Int!
    totalQuantity: Int!
    productImage: String!
}

input RequisitionCostInput {
    baseCost: Float!
    vat: Float!
    discount: Float
}

input RequisitionDurationInput {
    id: ID!
}

type RequisitionCost {
    id: ID!
    baseCost: Float!
    vat: Float!
    discount: Float
}

type RequisitionDuration {
    id: ID!
    name: String!
    slug: String
}

type ListingRating {
    id: ID
    count: Int
    rates: Int
    average: Float
}

type Rating {
    id: ID!
    listingId: String!
    ratingId: String!
    rate: Int!
    userId: String!
}

input ListingAvailability {
    from: String!
    to: String!
}

type ListingAvailabilityResponse {
    from: String!
    to: String!
}

type ListingRequirements {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
}

type SelectOptions {
    id: ID!
    slug: String!
    name: String!
}

type RoofingMaterialOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

type FloorsOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

type AmenitiesOptions {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

type ValueAddedServices {
    id: ID!
    slug: String!
    default: Boolean
    name: String!
    userId: String
}

type IdentificationsOptions {
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

type ListingsFrequencies {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
}

type ListingPhotosResult {
    url: String!
    default: Boolean
}

input ListingPhotos {
    url: String!
    default: Boolean
}

type States {
    countryId: String!
    slug: String!
    name: String!
    default: Boolean
}

type Countries {
    slug: String!
    name: String!
    default: Boolean
}

type ListingProducts {
    id: ID!
    slug: String!
    name: String!
    default: Boolean
    userId: String
}

type AccountResolve {
    accountName: String
}

type User {
    id: ID
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    dob: String!
    terms: Boolean
    type: String!
}

type Success {
    id: ID
    success: Boolean!
}

type Otp {
    id: ID
    phoneNumber: String!
    code: String!
    validated: Boolean!
}

type Organization {
    id: ID
    name: String!
    email: String!
    phoneNumber: String!
    bank: Bank!
    type: OrganizationType!
}

type OrganizationType {
    id: ID!
    name: String!
}

type Auth {
    id: ID!
    email: String!
    phoneNumber: String!
    pin: String!
    userId: String!
    user: User!
}

type UserOrganizationRole {
    id: ID!
    user: User!
    role: Role!
    organization: Organization!
}

type Role {
    id: ID!
    name: String!
}

type Bank {
    id: ID!
    accountNumber: String!
    accountName: String!
    bankName: String!
    bankCode: String!
}

type PaymentResponse {
    status: Boolean
    amount: Float
    transactionRef: String
    accessCode: String
    authorizationUrl: String
}

type Payment {
    id: ID!
    email: String!
    createdAt: String!
    updatedAt: String
    amount: Float!
    requisition: Requisition!
    status: Int!
    currency: String!
    channel: String
    customer: PaymentCustomer
    info: String!
}

type PaymentCustomer {
    id: ID!
    paystackId: String
    customerCode: String
    firstName: String
    lastName: String
    email: String
}

type AuthPayload {
    token: String!
    user: User!
}
